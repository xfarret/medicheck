# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
#security:

    # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
#    providers:
#        in_memory:
#            memory: ~

#    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false

#        main:
#            anonymous: ~
            # activate different ways to authenticate

            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
            #http_basic: ~

            # https://symfony.com/doc/current/security/form_login_setup.html
            #form_login: ~

security:
    encoders:
        Medicheck\UserBundle\Entity\User:
          algorithm: sha1
          iterations: 1
          encode_as_base64: false

    role_hierarchy:
        ROLE_ADMIN      : ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        users:
            entity:
                class: MedicheckUserBundle:User
                property: numSecu
#    encoders:
#        Symfony\Component\Security\Core\User\User: plaintext
#
#    role_hierarchy:
#        ROLE_ADMIN:       ROLE_USER
#        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
#
#    providers:
#        in_memory:
#            memory:
#                users:
#                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        secured_area:
            pattern:    ^/
            anonymous: ~
            security: true
            form_login:
                provider: users
                check_path: login_check
                login_path: login
                default_target_path: logged_homepage
                username_parameter: user_login[username]
                password_parameter: user_login[password]
                csrf_parameter: user_login[_csrf_token]
                #csrf_token_generator: security.csrf.token_manager
                #intention:      authenticate
                #csrf_provider:  form.csrf_provider
            logout:
                invalidate_session: false
                path:   logout
                target: login
            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/secured, roles: ROLE_USER, requires_channel: http }
